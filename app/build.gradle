apply plugin: 'com.android.model.application'

model {
    def signConf

    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.2"

        defaultConfig.with {
            applicationId = "com.example.gnaix.ndk"
            minSdkVersion.apiLevel = 14
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"

            buildConfigFields.with {
                create() {
                    type = "int"
                    name = "VALUE"
                    value = "1"
                }
            }
        }
    }
    android.buildTypes {
        release {
            minifyEnabled = true
            proguardFiles.add(file('proguard-rules.pro'))
            signingConfig = signConf
            ndk.with {
                debuggable = false
            }
        }
        debug{
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.pro'))
            ndk.with {
                debuggable = true
            }
        }
    }

    android.signingConfigs {
        create("myConfig") {
            keyAlias = 'gnaix'
            keyPassword = '990828785'
            storeFile = new File('/Users/xiangqing/Documents/workspace/android/gnaix.jks')
            storePassword = '990828785'
            storeType = "jks"
            signConf = it
        }
    }

    android.ndk {
        moduleName = "native"  //设置库(so)文件名称
//        CFlags.add("-DCUSTOM_DEFINE")
        ldLibs.addAll(["log", "android", "EGL", "GLESv1_CM"])
//        ldFlags.add("-L/custom/lib/path")
        stl = "stlport_static"
    }

    android.productFlavors {
        create("arm") {
            ndk.abiFilters.add("armeabi")
        }
        create("arm7") {
            ndk.abiFilters.add("armeabi-v7a")
        }
        create("arm8") {
            ndk.abiFilters.add("arm64-v8a")
        }
        create("x86") {
            ndk.abiFilters.add("x86")
        }
        create("x86-64") {
            ndk.abiFilters.add("x86_64")
        }
        create("mips") {
            ndk.abiFilters.add("mips")
        }
        create("mips-64") {
            ndk.abiFilters.add("mips64")
        }
        // To include all cpu architectures, leaves abiFilters empty
        create("all")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}
